<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Convenia Meeting Room</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
      const username = "<%= username %>";
    </script>
    <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css"
      integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh"
      crossorigin="anonymous"
    />
    <style>
      body {
        background-color: #181818;
        color: #fff;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        display: flex;
        flex-direction: column;
      }
      .header {
        text-align: center;
        background-color: #202020;
        padding: 15px 0;
        font-size: 20px;
        color: #00d8ff;
        font-weight: bold;
      }
      .room-id {
        font-size: 14px;
        margin-top: 5px;
        color: #ddd;
      }
      .main-container {
        display: flex;
        flex-grow: 1;
        overflow: hidden;
      }
      .video-section {
        flex: 3;
        display: flex;
        flex-direction: column;
        padding: 20px;
        gap: 10px;
        overflow-y: auto;
      }
      .video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        grid-gap: 15px;
        justify-items: center;
        align-items: center;
      }
      video {
        background-color: #333;
        border-radius: 8px;
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
      .controls {
        display: flex;
        justify-content: center;
        gap: 15px;
        padding: 10px;
        background-color: #202020;
        border-radius: 8px;
      }
      .controls button {
        background-color: #333;
        color: #fff;
        border: 1px solid #444;
        padding: 10px 15px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
      }
      .controls button:hover {
        background-color: #444;
      }
      .chat-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 20px;
        background-color: #202020;
        border-left: 1px solid #444;
      }
      .chat-header {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 15px;
        color: #00d8ff;
      }
      .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        background-color: #181818;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #333;
        color: #ddd;
      }
      .chat-box ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }
      .chat-input {
        display: flex;
        margin-top: 15px;
        gap: 10px;
      }
      .chat-input input {
        flex: 1;
        padding: 10px;
        border-radius: 4px;
        border: 1px solid #444;
        background-color: #333;
        color: #fff;
      }
      .chat-input button {
        background-color: #00d8ff;
        color: #000;
        border: none;
        border-radius: 4px;
        padding: 10px 15px;
        font-weight: bold;
      }
      .chat-input button:hover {
        background-color: #00b8e6;
      }
    </style>
  </head>
  <body>
    <div class="header">
      Convenia Meeting Room
      <div class="room-id">Room ID: <strong><%= roomId %></strong></div>
    </div>
    <div class="main-container">
      <!-- Video Section -->
      <div class="video-section">
        <div class="video-grid" id="video-grid"></div>
        <div class="controls">
          <button id="audio" onclick="muteAudiio()">Mute Audio</button>
          <button id="video" onclick="muteVideo()">Mute Video</button>
          <button onclick="leaveMeet()">Leave Meeting</button>
          <form action="/logout" method="get" style="display: inline">
            <button>Logout</button>
          </form>
        </div>
      </div>
      <!-- Chat Section -->
      <div class="chat-section">
        <div class="chat-header">Chat-Box</div>
        <div class="chat-box">
          <ul id="msg"></ul>
        </div>
        <div class="chat-input">
          <input
            type="text"
            name="message"
            id="message"
            placeholder="Type a message..."
          />
          <button onclick="sendMessage()">Send</button>
        </div>
      </div>
    </div>
    <script>
      const socket = io("/");
      const videoGrid = document.getElementById("video-grid");
      const myPeer = new Peer();
      const myVideo = document.createElement("video");
      myVideo.muted = true;
      const peers = {};
      let localStream;

      // Get user media (camera and microphone)
      navigator.mediaDevices
        .getUserMedia({ video: true, audio: true })
        .then((stream) => {
          localStream = stream;
          addVideoStream(myVideo, stream);

          myPeer.on("call", (call) => {
            call.answer(stream);
            const video = document.createElement("video");
            call.on("stream", (userVideoStream) => {
              addVideoStream(video, userVideoStream);
            });
          });

          socket.on("user-connected", (userId) => {
            connectToNewUser(userId, stream);
          });
        });

      socket.on("user-disconnected", (userId) => {
        if (peers[userId]) peers[userId].close();
      });

      myPeer.on("open", (id) => {
        socket.emit("join-room", ROOM_ID, id);
      });

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener("loadedmetadata", () => {
          video.play();
        });
        videoGrid.appendChild(video);
      }

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
          addVideoStream(video, userVideoStream);
        });
        call.on("close", () => {
          video.remove();
        });

        peers[userId] = call;
      }

      function muteAudiio() {
        const audioEnabled = localStream.getAudioTracks()[0].enabled;
        localStream.getAudioTracks()[0].enabled = !audioEnabled;
        document.getElementById("audio").textContent = audioEnabled
          ? "Unmute Audio"
          : "Mute Audio";
      }

      function muteVideo() {
        const videoEnabled = localStream.getVideoTracks()[0].enabled;
        localStream.getVideoTracks()[0].enabled = !videoEnabled;
        document.getElementById("video").textContent = videoEnabled
          ? "Unmute Video"
          : "Mute Video";
      }

      function leaveMeet() {
        if (confirm("Are you sure you want to leave the meeting?")) {
          window.history.back();
        }
      }

      function sendMessage() {
        const message = document.getElementById("message").value.trim();
        if (message) {
          socket.emit("send-chat", message, username);
          appendChatMessage(`You: ${message}`);
          document.getElementById("message").value = "";
        }
      }

      function appendChatMessage(message) {
        const msgList = document.getElementById("msg");
        const msgItem = document.createElement("li");
        msgItem.textContent = message;
        msgList.appendChild(msgItem);
        msgList.scrollTop = msgList.scrollHeight;
      }
    </script>
  </body>
</html>
